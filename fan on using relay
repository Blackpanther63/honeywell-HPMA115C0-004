#include <hpma115C0.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h> // Include the I2C LCD library

// Declare variables to store particle data
uint32_t pm2_5 = 0, pm10 = 0; // Must be uint32_t
uint32_t last_pm2_5 = 0, last_pm10 = 0; // Fallback values

// Create sensor object on Serial1
HPMA115C0 hpma(Serial1);

// Initialize I2C LCD (address 0x27 or 0x3F based on your I2C module)
LiquidCrystal_I2C lcd(0x27, 16, 2); // Adjust the I2C address (0x27 or 0x3F) as per your display

// Pin definitions for relay (fan control)
const int RELAY_PIN = 6; // Relay connected to pin 6

// Fan state variable
bool fanState = false; // Track fan status (ON/OFF)

// Threshold value for fan control
const int THRESHOLD = 11; // PM10 threshold value

void setup() {
  Serial.begin(9600);        // Initialize serial monitor
  Serial1.begin(9600);       // Initialize UART communication with sensor
  delay(5000);               // Wait for sensor to stabilize
  Serial.println("Initializing Dust Sensor...");

  // Initialize the sensor
  hpma.Init();
  hpma.StartParticleMeasurement();
  Serial.println("Sensor initialized successfully.");

  // Initialize the I2C LCD
  lcd.init();
  lcd.backlight();
  lcd.print("Dust Sensor Init");
  delay(2000);
  lcd.clear();

  // Initialize relay pin
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH); // Turn off the fan initially (active-low configuration)
}

void loop() {
  pm2_5 = pm10 = 0; // Reset values before reading

  // Retry mechanism
  bool readSuccess = false;
  for (int attempt = 0; attempt < 3; attempt++) { // Retry up to 3 times
    if (hpma.ReadParticleMeasurement(&pm2_5, &pm10)) {
      readSuccess = true;
      break; // Exit loop if read is successful
    }
    delay(1000); // Delay before retrying
  }

  // Handle success or fallback
  if (readSuccess) {
    // Update last valid readings
    last_pm2_5 = pm2_5;
    last_pm10 = pm10;
  } else {
    // Use last valid readings if sensor fails
    pm2_5 = last_pm2_5;
    pm10 = last_pm10;
  }

  // Print particle data on Serial Monitor
  Serial.print("PM2.5: ");
  Serial.print(pm2_5);
  Serial.print(" ug/m3, ");
  Serial.print("PM10: ");
  Serial.print(pm10);
  Serial.print(" ug/m3, ");

  // Print fan status
  if (pm10 > THRESHOLD) {
    Serial.println("Fan ON");
  } else {
    Serial.println("Fan OFF");
  }

  // Display particle data on I2C LCD
  lcd.setCursor(0, 0);
  lcd.print("                "); // Clear the line first
  lcd.setCursor(0, 0);
  lcd.print("PM2.5: ");
  lcd.print(pm2_5); // Display PM2.5 value
  lcd.print(" ug"); // Ensure "ug" is displayed correctly

  lcd.setCursor(0, 1);
  lcd.print("                "); // Clear the line first
  lcd.setCursor(0, 1);
  lcd.print("PM10: ");
  lcd.print(pm10); // Display PM10 value
  lcd.print(" ug"); // Ensure "ug" is displayed correctly

  // Control fan based on PM10 value
  if (pm10 > THRESHOLD && !fanState) {
    digitalWrite(RELAY_PIN, LOW); // Turn on the fan (active-low)
    fanState = true;
    Serial.println("Fan turned ON");
  } else if (pm10 <= THRESHOLD && fanState) {
    digitalWrite(RELAY_PIN, HIGH); // Turn off the fan (active-low)
    fanState = false;
    Serial.println("Fan turned OFF");
  }

  delay(2000); // Wait before the next reading
}
