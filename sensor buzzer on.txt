#include <hpma115C0.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h> // Include the I2C LCD library

// Declare variables to store particle data
uint32_t pm1_0, pm2_5, pm4_0, pm10; // Must be uint32_t
uint32_t last_pm1_0 = 0, last_pm2_5 = 0, last_pm4_0 = 0, last_pm10 = 0; // Fallback values

// Create sensor object on Serial1
HPMA115C0 hpma(Serial1);

// Initialize I2C LCD (address 0x27 or 0x3F based on your I2C module)
LiquidCrystal_I2C lcd(0x27, 16, 2); // Adjust the I2C address (0x27 or 0x3F) as per your display

void setup() {
  Serial.begin(9600);        // Initialize serial monitor
  Serial1.begin(9600);       // Initialize UART communication with sensor
  delay(5000);               // Wait for sensor to stabilize
  Serial.println("Initializing Dust Sensor...");

  // Initialize the sensor
  hpma.Init();
  hpma.StartParticleMeasurement();
  Serial.println("Sensor initialized successfully.");

  // Initialize the I2C LCD
  lcd.init();
  lcd.backlight();
  lcd.print("Dust Sensor Init");
  delay(2000);
  lcd.clear();
}

void loop() {
  pm1_0 = pm2_5 = pm4_0 = pm10 = 0; // Reset values before reading

  // Retry mechanism
  bool readSuccess = false;
  for (int attempt = 0; attempt < 3; attempt++) { // Retry up to 3 times
    if (hpma.ReadParticleMeasurement(&pm1_0, &pm2_5, &pm4_0, &pm10)) {
      readSuccess = true;
      break; // Exit loop if read is successful
    } else {
      Serial.println("Failed to read from dust sensor. Retrying...");
      delay(1000); // Delay before retrying
    }
  }

  // Handle success or fallback
  if (readSuccess) {
    // Update last valid readings
    last_pm1_0 = pm1_0;
    last_pm2_5 = pm2_5;
    last_pm4_0 = pm4_0;
    last_pm10 = pm10;
    Serial.println("Read successful!");
  } else {
    // Use last valid readings if sensor fails
    pm1_0 = last_pm1_0;
    pm2_5 = last_pm2_5;
    pm4_0 = last_pm4_0;
    pm10 = last_pm10;
    Serial.println("Error: Failed to read from dust sensor after multiple attempts. Using last valid readings.");
  }

  // Print particle data on Serial Monitor
  Serial.println("PM 1.0: " + String(pm1_0) + " ug/m3");
  Serial.println("PM 2.5: " + String(pm2_5) + " ug/m3");
  Serial.println("PM 4.0: " + String(pm4_0) + " ug/m3");
  Serial.println("PM 10: " + String(pm10) + " ug/m3");
  Serial.println(); // Blank line for readability

  // Print particle data on I2C LCD display
  lcd.setCursor(0, 0); // Line 1
  lcd.print("PM1.0:" + String(pm1_0) + " PM2.5:" + String(pm2_5));
  
  lcd.setCursor(0, 1); // Line 2
  lcd.print("PM4.0:" + String(pm4_0) + " PM10:" + String(pm10));

  delay(3000); // Wait before the next reading
}
